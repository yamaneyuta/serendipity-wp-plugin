name: CI
on:
  push:
    branches-ignore:
      - dependabot/**
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  node-version: 20.x

jobs:
  ci:
    name: CI (PHP ${{ matrix.env.php-version }} / WP ${{ matrix.env.wordpress-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      matrix:
        env: [
          { php-version: 7.4, wordpress-version: 5.4 },
          { php-version: 8.3, wordpress-version: 6.5.4 }
        ]

    steps:
    - uses: actions/checkout@v4

    - name: Cache wp-env directory
      id: wp-env-cache
      uses: actions/cache@v4
      with:
        path: ~/wp-env
        key: ${{ runner.os }}-wp-env-PHP${{ matrix.env.php-version }}-WP${{ matrix.env.wordpress-version }}
    - name: Docker build if wp-env cache is not hit
      # キャッシュからwp-envディレクトリを復元した場合はwp-envが使用するdocker-compose.ymlファイルが存在するため、
      # バックグラウンドでビルドを行っておく
      run: |
        if [ "${{ steps.wp-env-cache.outputs.cache-hit }}" = "true" ]; then
          cd ~/wp-env/8fac1173ea7f01aaea6fc9a6d834c8d0 && \
          COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 WP_ENV_MYSQL_PORT=3306 WP_ENV_TESTS_MYSQL_PORT=3307 \
          docker-compose build --parallel &
        fi

    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.node-version }}
        cache: 'npm'

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.env.php-version }}

    - name: Install phpcs
      run: composer global require squizlabs/php_codesniffer="3.9.2"
    - name: Install wpcs
      run: |
        composer global config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true &&
        composer global require --dev wp-coding-standards/wpcs:"3.1.0"

    - run: echo "PHP_VERSION=${{ matrix.env.php-version }}" >> $GITHUB_ENV
    - run: echo "WP_VERSION=${{ matrix.env.wordpress-version }}" >> $GITHUB_ENV

    - name: Install PHP packages
      run: source .bin/install-php-packages.sh


    - name: Cache node_modules directory
      id: node_modules-cache
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node_modules-${{ env.node-version }}-${{ hashFiles('**/package-lock.json') }}
    - name: Clean install if node_modules cache is not hit
      run: |
        if [ "${{ steps.node_modules-cache.outputs.cache-hit }}" = "true" ]; then
          echo "Skip npm ci"
          npm run prepare
        else
          npm ci
        fi


    # プロセス名に`docker`が含まれるプロセスがすべて終了するまで待機する
    # (wp-envのビルドが完了するまで待機する)
    - name: Wait for build wp-env images
      run: for i in $(seq 60); do if [ -z "$(ps | grep docker)" ]; then break; fi; sleep 1; echo "waiting($i)..."; done
    # Playwrightをインストールする時間の間、コンテナの初期化処理が行われるようにここでコンテナを起動する
    - run: npm run start:docker


    # Playwrightのインストールはnpm install後に実施すること。
    - name: Setup Playwright cache
      id: playwright-cache
      uses: actions/cache@v4
      with:
        path: /home/runner/.cache
        key: ${{ runner.os }}-playwright-cache-${{ hashFiles('**/package-lock.json') }}
        # restore-keys: ${{ runner.os }}-playwright-cache-
    - name: Install Playwright
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps

    - run: npm run ci:lint
    - run: npm run ci:test
    # wp-envの起動設定(--xdebug=)によってphpunitのテストは問題なく終了するがカバレッジレポートが出力されない、という状況になるため、
    # `ci:test`で実行するphpunitはcoverage出力オプションありをテスト実施項目とする。
    # ※ カバレッジレポートが出力されているかどうかのチェック処理は`postcoverage:php`に記述。

    # cleanコマンドでエラーが発生しないことを確認。
    - run: npm run clean

  docker-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build the Docker image
      run: |
        docker build . \
          --file .devcontainer/Dockerfile.wp-plugin \
          --tag my/development:latest \
          --build-arg PHP_OLDEST_VERSION=7.4 \
          --build-arg PHP_LATEST_VERSION=8.3
