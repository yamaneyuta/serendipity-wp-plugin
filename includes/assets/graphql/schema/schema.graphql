# ドメインエラーがあった場合、以下のように戻り値としてunionを返したいが、
# graphql-phpでunion型を簡単に返す方法がわからないため、戻り値はすべてtypeで定義した型を返す実装となっている。
# unionを簡単に返す方法が分かれば、リファクタを実施するかどうかを検討する。
# ※ TypeScript側でunion型を受け取った時に別途`__typename`での判定が必要となり、
# 　 errorフィールドを無視しづらい記述になるため可能であれば採用したい。
# 参考: https://quramy.medium.com/graphql-error-%E4%B8%8B%E3%81%8B%E3%82%89%E8%A6%8B%E3%82%8B%E3%81%8B-%E6%A8%AA%E3%81%8B%E3%82%89%E8%A6%8B%E3%82%8B%E3%81%8B-3924880be51f
#
# type DomainErrors {
# 	errorCodes: [String!]!
# }
# type Foo {
#   someField: Int!
# }
# union FooResult = Foo | DomainErrors
#

schema {
	query: Query
	mutation: Mutation
}

type Query {

	# 購入者の利用規約バージョン【ゲスト】
	consumerTermsVersion: Int!

	# 投稿情報を取得【ゲスト】
	post(postID: Int!): Post!

	# 販売者情報を取得【ゲスト】
	seller: Seller!

	# 署名用ウォレット情報を取得【ゲスト】
	serverSigner: ServerSigner!

	# サーバーがコントラクトに接続可能なチェーン一覧を取得【ゲスト】
	# 記事の続きを取得するための手続きが実施可能かどうかを判断するために使用
	verifiableChains(postID: Int!): [Chain!]!

	# -------------------- 以下、管理者向けクエリ --------------------

	# # 投稿一覧を取得
	# allPosts: [Post!]!

	# プラグインに含まれている販売者向け利用規約を取得【管理者】
	currentSellerTerms: Terms!
}

type Mutation {
	# 支払情報を発行【ゲスト】
	issueInvoice(postID: Int!, chainID: Int!, tokenAddress: String!, consumerAddress: String!): Invoice!

	# 記事の続きを取得【ゲスト】
	requestPaidContentByNonce(invoiceID: String!, nonce: String!): PaidContentByNonce!

	# 販売者の利用規約同意情報を設定【管理者】
	setSellerAgreedTerms(version: Int!, signature: String!): Boolean!

	# 対象のチェーンで支払いに使用可能なトークンを追加【管理者】
	addPayableTokens(chainID: Int!, tokenAddresses: [String!]!): Boolean!
	# 対象のチェーンで支払いに使用可能なトークンを削除【管理者】
	removePayableTokens(chainID: Int!, tokenAddresses: [String!]!): Boolean!


	# ----- 以下、React-Admin用 -----
	# ※ 前提として、GraphQL-CodegenはQueryをuseXXXQueryとしてhooksを定義する。
	# 　 React-Adminでカスタムプロバイダを使用するにあたり、useXXXQueryではコールバックの引数の値(例:チェーンID)を使用することが難しいため
	# 　 仕方なくQueryではなくMutationで定義。解決法がわかり次第、Queryに変更する。
	# 　 -> GraphQL-Codegenの設定やプラグインで解決できれば、それでもよい
	# ※ 自動生成のメリットが失われるため、GraphQL-Codegenが生成したQueryの型を使ってuseMutationで定義し直すようなことはしない。

	# このサイトに登録されているトークン一覧【管理者】
	# (ネイティブトークン + 管理者が追加したERC20トークン)
	tokens(filter: TokensFilter): [Token!]!

	# チェーン一覧を取得【管理者】
	chains(filter: ChainsFilter): [Chain!]!

	# ネットワークカテゴリ一覧を取得【投稿編集者】
	networkCategories(filter: NetworkCategoryFilter): [NetworkCategory!]!
}

# 投稿に関する情報
type Post {
	id: Int!						# 投稿ID【ゲスト】
	title: String!                  # 投稿タイトル【ゲスト】
	sellingPrice: Price             # 販売価格【ゲスト】
	sellingContent: SellingContent  # 販売対象の投稿内容に関する情報【ゲスト】
	payableTokens: [Token!]!		# 支払いに使用可能なトークン一覧【ゲスト】
}

input TokensFilter {
	chainID: Int
	address: String
}

input ChainsFilter {
	isConnectable: Boolean	# サーバーから接続可能なチェーンのみ取得する場合にtrueを指定
}

input NetworkCategoryFilter {
	networkCategoryID: Int	# ネットワークカテゴリを1つだけ取得する際に指定
}

type NetworkCategory {
	id: Int!
	chains: [Chain!]! # このカテゴリに含まれるチェーン一覧【管理者】
	# TODO: `sellableSymbols`はネットワークカテゴリに紐づかなくなったため、`Query`に移動する
	sellableSymbols: [String!]! # 販売価格として設定可能な通貨シンボル一覧【投稿編集者】
}

type Chain {
	id: Int!	# チェーンID【ゲスト】
	appContract: AppContract	# このチェーンにデプロイされているアプリケーションコントラクトの情報【ゲスト】
	confirmations: String!		# ブロック確認数("1"などの10進数の文字列または"finalized"などのブロック位置)【ゲスト】
	tokens: [Token!]!			# このチェーンに存在するトークン一覧【管理者】
	networkCategory: NetworkCategory! # このチェーンが属するネットワークカテゴリ【管理者】
}

type AppContract {
	address: String!	# アプリケーションコントラクトアドレス【ゲスト】
}

type Token {
	chain: Chain!		# トークンが発行されているチェーン【ゲスト】
	address: String!	# トークンのコントラクトアドレス【ゲスト】
	symbol: String!     # トークンの通貨シンボル【ゲスト】
	isPayable: Boolean!	# 訪問者が支払に使用可能かどうかの設定【管理者】
}

type Price {
	amountHex: String!	# 金額(0xプレフィックス付きの16進数)
	decimals: Int!  	# 小数点以下の桁数
	symbol: String! 	# 通貨記号(`USD`, `ETH`等)。記号(`$`等)不可。
}

# 販売対象となっている投稿コンテンツの(保存されているHTMLに関する)情報
type SellingContent {
	characterCount: Int!	# 文字数
	# 単語数はPHPでカウントすることが難しいため見送り	wordCount: Int!			# 単語数
	imageCount: Int!		# 画像数
}

type Invoice {
	invoiceIdHex: String!
	nonce: String!				# 購入者の署名を省略するための乱数
	serverMessage: String!      # サーバーで生成した署名対象メッセージ(クライアント側でコントラクトとの整合性を検証するために使用)
	serverSignature: String!	# 署名用ウォレットで作成した署名
	paymentAmountHex: String!		# 支払う数量(0xプレフィックス付きの16進数)
}

enum PaidContentByNonceError {
	INVALID_NONCE
	INVALID_CHAIN_ID
	PAYWALL_LOCKED
	TRANSACTION_UNCONFIRMED
}

type PaidContentByNonce {
	content: String # 購入者に提供されるコンテンツ
	errorCode: PaidContentByNonceError
}

type ServerSigner {
	address: String! # 署名用ウォレットアドレス
}

# 販売者情報
# ※ 請求書(支払時情報)取得時に参照されるので、各プロパティがログイン無しのユーザーに閲覧される可能性があることに注意
type Seller {
	agreedTerms: AgreedTerms  # 販売者が同意した利用規約(利用規約に同意していない場合はnull)
}

# 利用規約同意情報
type AgreedTerms {
	version: Int!		# 同意した利用規約のバージョン
	message: String!	# 利用規約に同意する際、ウォレットに表示されたメッセージ
	signature: String!	# 利用規約に同意する際、ウォレットに表示されたメッセージに対する署名
}

# 利用規約情報
type Terms {
	version: Int!		# 利用規約のバージョン
	message: String!	# 利用規約同意時のメッセージ(ウォレットに表示されるメッセージ)
}
